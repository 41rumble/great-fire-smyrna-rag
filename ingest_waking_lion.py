#!/usr/bin/env python3
"""
Ingest the "Waking the Lion" book that was processed by breakup_pdf.py
"""

from multi_book_ingest import MultiBookIngest
import json
import os

def ingest_waking_lion():
    """Ingest the Waking the Lion book"""
    
    print("ü¶Å INGESTING: Waking the Lion")
    print("=" * 60)
    
    # Load the metadata generated by breakup_pdf.py
    metadata_file = "./text_files/waking_the_lion_metadata.json"
    
    if os.path.exists(metadata_file):
        with open(metadata_file, 'r') as f:
            book_metadata = json.load(f)
        print(f"üìñ Loaded metadata: {book_metadata['title']} by {book_metadata['author']}")
    else:
        print("‚ö†Ô∏è  No metadata file found, using manual info")
        book_metadata = {
            'title': 'Waking the Lion',
            'author': 'Roger L. Jennings',
            'year': None,
            'pages': None
        }
    
    # Create book info for ingestion
    book_info = {
        'title': book_metadata['title'],
        'author': book_metadata['author'],
        'year': book_metadata.get('year', 2010),  # Estimate if not found
        'isbn': book_metadata.get('isbn', ''),
        'publisher': 'Unknown',
        'perspective': 'American perspective on Smyrna/Asia Minor events',
        'language': 'English',
        'historical_period': '1922 Greek-Turkish War / Asia Minor catastrophe',
        'description': 'Historical account from American perspective of events surrounding the Smyrna fire and Asia Minor crisis'
    }
    
    print("\nüìö Book Information:")
    print(f"   Title: {book_info['title']}")
    print(f"   Author: {book_info['author']}")
    print(f"   Perspective: {book_info['perspective']}")
    print(f"   Period: {book_info['historical_period']}")
    
    # Initialize ingester
    ingester = MultiBookIngest()
    
    try:
        # Ingest the book using the section files created by breakup_pdf.py
        file_pattern = "waking_the_lion_section_*.txt"
        
        print(f"\nüîÑ Starting ingestion with pattern: {file_pattern}")
        ingester.ingest_book(book_info, file_pattern)
        
        print("\n‚úÖ INGESTION COMPLETE!")
        print("üîó Linking to canonical entities...")
        
        # Link to existing canonical entities
        source_id = book_info['title'].lower().replace(' ', '-').replace("'", "")
        source_id = "waking-the-lion"  # Clean source ID
        
        ingester.link_to_canonical_entities(source_id)
        
        print("\nüéâ BOOK SUCCESSFULLY ADDED TO DATABASE!")
        print("üí° You now have THREE books in your system:")
        print("   üìö The Great Fire of Smyrna (Lou Ureneck) - American journalist perspective")
        print("   üî• Flames on the Water (Con Aroney) - Australian Greek perspective") 
        print("   ü¶Å Waking the Lion (Roger L. Jennings) - American perspective")
        print("\nüîç You can now:")
        print("   ‚Ä¢ Compare THREE different perspectives on the same events")
        print("   ‚Ä¢ Run multi-source queries across all books")
        print("   ‚Ä¢ Analyze how different nationalities/backgrounds describe events")
        print("   ‚Ä¢ Find unique content and conflicting accounts")
        
    except Exception as e:
        print(f"‚ùå Ingestion failed: {e}")
        import traceback
        traceback.print_exc()
        
    finally:
        ingester.close()

if __name__ == "__main__":
    ingest_waking_lion()